version: '3.8'

networks:
  bridge:
    driver: bridge
    ipam:
      config:
        - subnet: 172.17.0.0/16
          gateway: 172.17.0.1
  host:
    driver: host
  kasm_default_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
          gateway: 172.18.0.1
  none:
    driver: null
  sysreptor_default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  # Hashed volumes
  252d9232728ad61b918beab6c41000427422a:
    driver: local
    driver_opts:
      type: none
      device: /mnt/docker/volumes/252d9232728ad61b918beab6c41000427422a/_data
      o: bind
  52e1a97102b402fbb572830d36cc42648c2f9:
    driver: local
    driver_opts:
      type: none
      device: /mnt/docker/volumes/52e1a97102b402fbb572830d36cc42648c2f9/_data
      o: bind
  3f135bde4b14a9d97bdf75da01a9f813db2bf:
    driver: local
    driver_opts:
      type: none
      device: /mnt/docker/volumes/3f135bde4b14a9d97bdf75da01a9f813db2bf/_data
      o: bind
  # Named volumes
  sysreptor-app-data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/docker/volumes/sysreptor-app-data/_data
      o: bind
  sysreptor-db-data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/docker/volumes/sysreptor-db-data/_data
      o: bind
  sysreptor-caddy-data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/docker/volumes/sysreptor-caddy-data/_data
      o: bind
  kasm_db_1.15.0:
    driver: local
    driver_opts:
      type: none
      device: /mnt/docker/volumes/kasm_db_1.15.0/_data
      o: bind
  portainer_data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/docker/volumes/portainer_data/_data
      o: bind
  # RTPI-PEN volumes
  rtpi-pen-data:
    driver: local
    driver_opts:
      type: none
      device: /mnt/docker/volumes/rtpi-pen-data/_data
      o: bind
  rtpi-pen-tools:
    driver: local
    driver_opts:
      type: none
      device: /mnt/docker/volumes/rtpi-pen-tools/_data
      o: bind

services:
  # Docker stack
  kasm_agent:
    image: kasmweb/agent:1.15.0
    container_name: kasm_agent
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - kasm_db_1.15.0:/data

  kasm_api:
    image: kasmweb/api:1.15.0
    container_name: kasm_api
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kasm_db:
    image: postgres:12-alpine
    container_name: kasm_db
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.4
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - kasm_db_1.15.0:/var/lib/postgresql/data

  kasm_guac:
    image: kasmweb/kasm-guac:1.15.0
    container_name: kasm_guac
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.9
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kasm_manager:
    image: kasmweb/manager:1.15.0
    container_name: kasm_manager
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.7
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kasm_proxy:
    image: kasmweb/nginx:1.25.3
    container_name: kasm_proxy
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.2
    ports:
      - "443:443"
    depends_on:
      - kasm_api
      - kasm_manager

  kasm_redis:
    image: redis:5-alpine
    container_name: kasm_redis
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.6
    command: redis-server --appendonly yes

  kasm_share:
    image: kasmweb/share:1.15.0
    container_name: kasm_share
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.8
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Other containers in docker stack
  node:
    image: node:latest
    container_name: node
    restart: unless-stopped
    networks:
      bridge:
        ipv4_address: 172.17.0.3
    ports:
      - "3500:3500"

  portainer:
    image: portainer/portainer-ce:2.21.0
    container_name: portainer
    restart: unless-stopped
    networks:
      bridge:
        ipv4_address: 172.17.0.2
    ports:
      - "8000:8000"
      - "9443:9443"
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock

  ps-empire:
    image: bcsecurity/empire:latest
    container_name: ps-empire
    restart: unless-stopped
    networks:
      bridge:
        ipv4_address: 172.17.0.5
    ports:
      - "1337:1337"
      - "5000:5000"

  # Sysreptor stack
  sysreptor-app:
    image: syslifters/sysreptor:2024.96
    container_name: sysreptor-app
    restart: unless-stopped
    networks:
      sysreptor_default:
        ipv4_address: 172.20.0.4
    ports:
      - "9000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - sysreptor-app-data:/app/data
    depends_on:
      - sysreptor-db
      - sysreptor-redis

  sysreptor-caddy:
    image: caddy:latest
    container_name: sysreptor-caddy
    restart: unless-stopped
    networks:
      sysreptor_default: {}
    volumes:
      - sysreptor-caddy-data:/data

  sysreptor-db:
    image: postgres:14
    container_name: sysreptor-db
    restart: unless-stopped
    networks:
      sysreptor_default:
        ipv4_address: 172.20.0.3
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - sysreptor-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=sysreptorpassword
      - POSTGRES_USER=sysreptor
      - POSTGRES_DB=sysreptor

  sysreptor-redis:
    image: bitnami/redis:7.2
    container_name: sysreptor-redis
    restart: unless-stopped
    networks:
      sysreptor_default:
        ipv4_address: 172.20.0.2
    environment:
      - REDIS_PASSWORD=sysreptorredispassword

  # RTPI-PEN Custom Service
  rtpi-pen:
    build:
      context: ../dockerfiles/RTPI-PEN
      dockerfile: Dockerfile
    image: rtpi-pen:latest
    container_name: rtpi-pen
    restart: unless-stopped
    networks:
      kasm_default_network:
        ipv4_address: 172.18.0.10
    ports:
      - "6901:6901"  # VNC Web Interface
      - "4444:4444"  # Metasploit listener port
      - "8080:8080"  # Additional web service port
    volumes:
      - rtpi-pen-data:/home/kasm-user
      - rtpi-pen-tools:/opt/rtpi
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker socket for container management
    environment:
      - VNC_PW=rtpipassword
      - KASM_PORT=6901
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6901/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - kasm_db
      - kasm_redis
      - portainer
    privileged: true  # Required for some penetration testing tools
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun  # For VPN capabilities
